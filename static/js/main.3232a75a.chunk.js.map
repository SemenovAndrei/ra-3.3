{"version":3,"sources":["dataMessage.js","components/Message/Message.jsx","components/Response/Response.jsx","components/Typing/Typing.jsx","components/MessageHistory/MessageHistory.jsx","App.js","reportWebVitals.js","index.js"],"names":["messages","id","from","name","type","time","text","Message","props","className","data","Response","Typing","MessageHistory","list","map","o","length","defaultProps","App","dataMessage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kJAuCeA,G,UAvCS,CACtB,CACEC,GAAI,cACJC,KAAM,CAAEC,KAAM,kCACdC,KAAM,WACNC,KAAM,QACNC,KAAM,kRAER,CACEL,GAAI,cACJC,KAAM,CAAEC,KAAM,wCACdC,KAAM,UACNC,KAAM,QACNC,KACE,8bAEJ,CACEL,GAAI,cACJC,KAAM,CAAEC,KAAM,kCACdC,KAAM,WACNC,KAAM,QACNC,KACE,8rBAEJ,CACEL,GAAI,cACJC,KAAM,CAAEC,KAAM,wCACdC,KAAM,UACNC,KAAM,QACNC,KAAM,6RAER,CACEL,GAAI,cACJC,KAAM,CAAEC,KAAM,wCACdC,KAAM,SACNC,KAAM,W,OCVKE,MAtBf,SAAiBC,GACf,OACE,qCACE,sBAAKC,UAAU,2BAAf,UACE,sBAAMA,UAAU,oBAAhB,SAAqCD,EAAME,KAAKL,OADlD,aAEE,sBAAMI,UAAU,oBAAhB,SAAqCD,EAAME,KAAKR,KAAKC,OACrD,mBAAGM,UAAU,iCAAb,uBAEF,qBAAKA,UAAU,oCAAf,SAAoDD,EAAME,KAAKJ,WCgBtDK,MAxBf,SAAkBH,GAChB,OACE,qCACE,sBAAKC,UAAU,0BAAf,UACE,uBAAMA,UAAU,oBAAhB,UACE,mBAAGA,UAAU,qCAAb,oBACCD,EAAME,KAAKR,KAAKC,QAEnB,sBAAMM,UAAU,oBAAhB,SAAqCD,EAAME,KAAKL,UAElD,qBAAKI,UAAU,qBAAf,SAAqCD,EAAME,KAAKJ,WCiBvCM,MA3Bf,SAAgBJ,GACd,OACE,qCACE,sBAAKC,UAAU,0BAAf,UACE,uBAAMA,UAAU,oBAAhB,UACE,mBAAGA,UAAU,qCAAb,oBACCD,EAAME,KAAKR,KAAKC,QAEnB,sBAAMM,UAAU,oBAAhB,SAAqCD,EAAME,KAAKL,UAElD,sBAAKI,UAAU,mCAAf,UACE,sBAAMA,UAAU,QAAhB,oBACA,sBAAMA,UAAU,SAAhB,oBACA,sBAAMA,UAAU,QAAhB,2BCVR,SAASI,EAAeL,GACtB,IAAMR,EAAWQ,EAAMM,KAAKC,KAAI,SAACC,GAC/B,MAAe,aAAXA,EAAEZ,KAEF,oBAAIK,UAAU,WAAd,SACE,cAAC,EAAD,CAASC,KAAMM,KADaA,EAAEf,IAMrB,YAAXe,EAAEZ,KAEF,oBAAIK,UAAU,GAAd,SACE,cAAC,EAAD,CAAUC,KAAMM,KADIA,EAAEf,IAMb,WAAXe,EAAEZ,KAEF,oBAAIK,UAAU,GAAd,SACE,cAAC,EAAD,CAAQC,KAAMM,KADMA,EAAEf,IAMrB,QAGT,OAA2B,IAApBD,EAASiB,QAAgB,oBAAIR,UAAU,2BAAd,SAA0CT,IAG5Ea,EAAeK,aAAe,CAC5BJ,KAAM,IAOOD,QC7BAM,MAbf,WACE,OACE,sBAAKV,UAAU,qBAAf,UACE,qBAAKA,UAAU,cAAf,yBACA,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAgBK,KAAMM,YCEjBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3232a75a.chunk.js","sourcesContent":["export const messages = [\n  {\n    id: 'chat-5-1090',\n    from: { name: 'Ольга' },\n    type: 'response',\n    time: '10:10',\n    text: 'Привет, Виктор. Как дела? Как идет работа над проектом?',\n  },\n  {\n    id: 'chat-5-1091',\n    from: { name: 'Виктор' },\n    type: 'message',\n    time: '10:12',\n    text:\n      'Привет. Давай сегодня созвонимся. Проект практически готов, и у меня есть что показать.',\n  },\n  {\n    id: 'chat-5-1092',\n    from: { name: 'Ольга' },\n    type: 'response',\n    time: '10:14',\n    text:\n      'Не уверена что сегодня получится. Не все еще в офисе. Давай уточню через час. Возникли ли какие-либо проблемы на последней стадии проекта?',\n  },\n  {\n    id: 'chat-5-1093',\n    from: { name: 'Виктор' },\n    type: 'message',\n    time: '10:20',\n    text: 'Нет, все прошло гладко. Очень хочу показать всё команде.',\n  },\n  {\n    id: 'chat-5-1094',\n    from: { name: 'Виктор' },\n    type: 'typing',\n    time: '10:31',\n  },\n]\n\nexport default messages\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Message(props) {\n  return (\n    <>\n      <div className=\"message-data align-right\">\n        <span className=\"message-data-time\">{props.data.time}</span> &nbsp; &nbsp;\n        <span className=\"message-data-name\">{props.data.from.name}</span>\n        <i className=\"fa fa-circle me material-icons\">circle</i>\n      </div>\n      <div className=\"message other-message float-right\">{props.data.text}</div>\n    </>\n  )\n}\n\nMessage.propTypes = {\n  data: PropTypes.shape({\n    id: PropTypes.string,\n    time: PropTypes.string,\n    from: PropTypes.object,\n    text: PropTypes.string,\n  }),\n}\n\nexport default Message\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Response(props) {\n  return (\n    <>\n      <div className=\"message-data align-left\">\n        <span className=\"message-data-name\">\n          <i className=\"fa fa-circle online material-icons\">circle</i>\n          {props.data.from.name}\n        </span>\n        <span className=\"message-data-time\">{props.data.time}</span>\n      </div>\n      <div className=\"message my-message\">{props.data.text}</div>\n    </>\n  )\n}\n\nResponse.propTypes = {\n  data: PropTypes.shape({\n    id: PropTypes.string,\n    time: PropTypes.string,\n    from: PropTypes.object,\n    text: PropTypes.string,\n  }),\n}\n\nexport default Response\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Typing(props) {\n  return (\n    <>\n      <div className=\"message-data align-left\">\n        <span className=\"message-data-name\">\n          <i className=\"fa fa-circle online material-icons\">circle</i>\n          {props.data.from.name}\n        </span>\n        <span className=\"message-data-time\">{props.data.time}</span>\n      </div>\n      <div className=\"typing align-left material-icons\">\n        <span className=\"first\">circle</span>\n        <span className=\"second\">circle</span>\n        <span className=\"third\">circle</span>\n      </div>\n    </>\n  )\n}\n\nTyping.propTypes = {\n  data: PropTypes.shape({\n    id: PropTypes.string,\n    time: PropTypes.string,\n    from: PropTypes.object,\n  }),\n}\n\nexport default Typing\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Message from '../Message/Message'\nimport Response from '../Response/Response'\nimport Typing from '../Typing/Typing'\n\nfunction MessageHistory(props) {\n  const messages = props.list.map((o) => {\n    if (o.type === 'response') {\n      return (\n        <li className=\"clearfix\" key={o.id}>\n          <Message data={o} />\n        </li>\n      )\n    }\n\n    if (o.type === 'message') {\n      return (\n        <li className=\"\" key={o.id}>\n          <Response data={o} />\n        </li>\n      )\n    }\n\n    if (o.type === 'typing') {\n      return (\n        <li className=\"\" key={o.id}>\n          <Typing data={o} />\n        </li>\n      )\n    }\n\n    return null\n  })\n\n  return messages.length !== 0 && <ul className=\"MessageHistory chat-data\">{messages}</ul>\n}\n\nMessageHistory.defaultProps = {\n  list: [],\n}\n\nMessageHistory.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object),\n}\n\nexport default MessageHistory\n","import './App.css'\nimport dataMessage from './dataMessage'\nimport MessageHistory from './components/MessageHistory/MessageHistory'\n\nfunction App() {\n  return (\n    <div className=\"clearfix container\">\n      <div className=\"people-list\">People List</div>\n      <div className=\"chat\">\n        <div className=\"chat-history\">\n          <MessageHistory list={dataMessage} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}